---
// MemeFollower component - adds a fun cursor-following element
---

<div id="meme-cursor" class="hidden fixed pointer-events-none z-20 select-none">
  <span id="meme-emoji" class="text-3xl">✨</span>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const memeCursor = document.getElementById('meme-cursor');
    const memeEmoji = document.getElementById('meme-emoji');
    
    // Array of wholesome emojis that fit our theme
    const emojis = ['✨', '🎉', '🌈', '💖', '🐶', '🐱', '🦄', '🍥', '🧁', '🍭', '☁️'];
    
    // Last known mouse position
    let mouseX = 0;
    let mouseY = 0;
    
    // Current cursor position with lag effect
    let cursorX = 0;
    let cursorY = 0;
    
    // Track mouse position
    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
      
      // Show the cursor when mouse moves
      if (memeCursor?.classList.contains('hidden')) {
        memeCursor?.classList.remove('hidden');
      }
    });
    
    // Change emoji on click
    document.addEventListener('click', () => {
      if (memeEmoji) {
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
        memeEmoji.textContent = randomEmoji;
        
        // Add a short animation on click
        memeEmoji.style.animation = 'none';
        void memeEmoji.offsetWidth; // Trigger reflow
        memeEmoji.style.animation = 'tada 0.6s ease-in-out';
        
        // Create burst effect on click
        createBurst(mouseX, mouseY);
      }
    });
    
    // Create burst of emojis when clicked - gentle and cute
    function createBurst(x, y) {
      const burstCount = 4; // Reduced for less chaos
      
      for (let i = 0; i < burstCount; i++) {
        const burst = document.createElement('div');
        burst.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        burst.style.position = 'fixed';
        burst.style.left = `${x}px`;
        burst.style.top = `${y}px`;
        burst.style.fontSize = '16px';
        burst.style.pointerEvents = 'none';
        burst.style.zIndex = '20';
        burst.style.transform = 'translate(-50%, -50%)';
        burst.style.transition = 'all 0.7s ease-in-out';
        
        document.body.appendChild(burst);
        
        // Random direction - more constrained angles for more consistent motion
        const angle = (Math.PI / 2) * i + (Math.random() * Math.PI / 4);
        const distance = 40 + Math.random() * 30; // More consistent distance
        
        // Animate the burst
        setTimeout(() => {
          burst.style.transform = `translate(
            calc(-50% + ${Math.cos(angle) * distance}px), 
            calc(-50% + ${Math.sin(angle) * distance}px)
          )`;
          burst.style.opacity = '0';
        }, 10);
        
        // Remove the burst element after animation
        setTimeout(() => {
          burst.remove();
        }, 700); // Longer to match transition
      }
    }
    
    // Animation loop with lag effect - smoother easing
    function updateCursor() {
      // Create lag effect with easing
      cursorX += (mouseX - cursorX) * 0.15; // Slightly slower for smoother movement
      cursorY += (mouseY - cursorY) * 0.15;
      
      if (memeCursor) {
        memeCursor.style.transform = `translate(
          calc(${cursorX}px - 50%), 
          calc(${cursorY}px - 50%)
        )`;
      }
      
      requestAnimationFrame(updateCursor);
    }
    
    // Hide cursor when mouse leaves the window
    document.addEventListener('mouseleave', () => {
      memeCursor?.classList.add('hidden');
    });
    
    // Start animation loop
    updateCursor();
  });
</script> 
