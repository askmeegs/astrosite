---
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className = "", 
  loading = 'lazy'
} = Astro.props;

const isExternal = src.startsWith('http');
---

{isExternal ? (
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class={className}
    decoding="async"
  />
) : (
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    class={className}
    decoding="async"
  />
)}

<style>
  img {
    /* Add a subtle animation when image appears */
    &[loading="lazy"] {
      transition: opacity 0.3s, transform 0.3s;
    }
    
    /* Apply skeleton loader style before loaded */
    &[loading="lazy"]:not([loaded]) {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
    }
  }

  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
</style>

<script>
  // Mark loaded images to remove loading animation
  document.addEventListener('DOMContentLoaded', () => {
    const lazyImages = document.querySelectorAll('img[loading="lazy"]');
    
    lazyImages.forEach(img => {
      if (img.complete) {
        img.setAttribute('loaded', 'true');
      } else {
        img.addEventListener('load', () => {
          img.setAttribute('loaded', 'true');
        });
      }
    });
  });
</script> 
